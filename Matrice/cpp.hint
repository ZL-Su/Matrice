// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define DGE_MATRICE_BEGIN namespace dgelom {
#define _INTERNAL_BEGIN namespace internal {
#define _DETAIL_BEGIN namespace detail {
#define _DETAIL_END }
#define _INTERNAL_BEGIN namespace internal {
#define MATRICE_GLOBAL_INL
#define _VIEW_EWISE_COPY_N(_LEFT, _N) DGELOM_CHECK(_N <= size(), "matrix size over range of current view."); size_t _Size = (_N==0) ? size() : _N; for(size_t _Idx = 0; _Idx < _Size; ++_Idx) { _LEFT(_Idx) = this->operator()(_Idx); }
#define lapack_int
#define MATRICE_MAKE_EXPOP_TYPE(DESC, NAME)
#define DGELOM_CHECK(_Cond, __VA_ARGS__) if(!(_Cond)) { DGELOM_ERROR(::dgelom::exception::msg_type(__VA_ARGS__)); }
#define MATRICE_EVALEXP_TOTHIS { m_data = _Myalloc.data(); exp.assign(*this); }
#define MATRICE_EXPAND_SHAPE
#define MATRICE_GLOBAL_FINL
#define MATRICE_MAKE_ARITHOP(OP, NAME) template<typename _Rhs> MATRICE_GLOBAL_INL auto operator##OP(const _Rhs& _Right) const noexcept { return Exp::EwiseBinaryExp<_Myt, _Rhs, _Xop_ewise_##NAME>(*this, _Right); } template<typename _Lhs, MATRICE_ENABLE_IF(is_scalar_v<_Lhs>)> friend MATRICE_GLOBAL_FINL auto operator##OP(const _Lhs& _Left, const _Derived& _Right) noexcept { return Exp::EwiseBinaryExp<_Lhs, _Derived, _Xop_ewise_##NAME>(_Left, _Right); }
#define MATRICE_MAKE_EXP_ASSIGNOP(NAME) template<typename _Lhs, typename _Rhs, typename _Op> MATRICE_GLOBAL_INL auto& operator=(const Exp##NAME##BinaryExp<_Lhs,_Rhs,_Op>& _Ex)noexcept{ return (*static_cast<_Derived*>(&_Ex.assign(*this))); } template<typename _Rhs, typename _Op> MATRICE_GLOBAL_INL auto& operator=(const Exp##NAME##UnaryExp<_Rhs, _Op>& _Ex) noexcept{ return (*static_cast<_Derived*>(&_Ex.assign(*this))); }
#define MATRICE_MAKE_EWISE_BIOP(NAME) template<typename _Ty> struct _Ewise_##NAME { enum {flag = ewise}; using category = tag::_Ewise_##NAME##_tag; template<typename _Uy = _Ty> MATRICE_GLOBAL_FINL constexpr auto operator() (const _Ty& _Left, const _Uy& _Right) const { return (NAME(_Left, _Right)); }};
